version: '2.3'

services:
  golang:
    image: jdrouet/eco-backend:golang
    build:
      context: ./golang
      network: host
    environment:
      - BLACKHOLE_URL=http://blackhole:3000
    networks:
      - backend
    ports:
      - 3000:8080
    restart: unless-stopped

  java-springboot:
    image: jdrouet/eco-backend:java-springboot
    build:
      context: ./java-springboot
      network: host
    environment:
      - BLACKHOLE_URL=http://blackhole:3000
    networks:
      - backend
    ports:
      - 3000:8080
    restart: unless-stopped

  nodejs-express:
    image: jdrouet/eco-backend:nodejs-express
    build:
      context: ./nodejs-express
      network: host
    environment:
      - BLACKHOLE_URL=http://blackhole:3000
    networks:
      - backend
    ports:
      - 3000:3000
    restart: unless-stopped

  php-laravel:
    image: jdrouet/eco-backend:php-laravel
    build:
      context: ./php-laravel
      network: host
    environment:
      - BLACKHOLE_URL=http://blackhole:3000
      - APP_ENV=production
      - APP_DEBUG=false
    networks:
      - backend
    ports:
      - 3000:80
    restart: unless-stopped

  python-flask:
    image: jdrouet/eco-backend:python-flask
    build:
      context: ./python-flask
      network: host
    environment:
      - BLACKHOLE_URL=http://blackhole:3000
      - HOST=0.0.0.0
      - PORT=3000
    networks:
      - backend
    ports:
      - 3000:3000
    restart: unless-stopped

  rust-actix:
    image: jdrouet/eco-backend:rust-actix
    build:
      context: ./rust-actix
      network: host
    environment:
      - ADDRESS=0.0.0.0:3000
      - BLACKHOLE_URL=http://blackhole:3000
    networks:
      - backend
    ports:
      - 3000:3000
    restart: unless-stopped

  blackhole:
    image: ghcr.io/blt/lading:latest
    command: /http_blackhole --config-path /config.toml
    networks:
      - backend
    volumes:
      - ./blackhole/config.toml:/config.toml:ro

  activity:
    image: jdrouet/docker-activity:latest
    command: file --format csv /data/output.csv
    volumes:
      - ./results:/data
      - /sys/class/powercap:/sys/class/powercap:ro
      - /var/run/docker.sock:/var/run/docker.sock

networks:
  backend: {}
